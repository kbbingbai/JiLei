return this.todos.reduce((total,ele) => total+(ele.complete?1:0),0)

上面是进行计数，

###############################################################

vue的监听

我们通常通过watch来监听数据的变化，然后做相应的处理，但是我们发现有时候watch无法监听对象内部的变化，这时候我们就需要用到深度监听，因为我们要知道浅度监听和深度监听的区别，浅度监听只能监听到数组长度的变化比如数组中添加一个元素，或者是某个值的变化比如改变data中a的值，但是如果想要监听某个对象内部值的变化，浅度监听就没有监听对象的变化，这时候就要用到深度监听，例：

data: {obj: {a: 2,b:3}}

mounted () {

this.obj.a  = 5

}

watch: {

obj () {

}

}

这时候watch无法监听到，用深度监听

watch:{

obj: {

handler () {}, deep:true

}

}

这时候用深度监听就可以了
-----------------------------------------

watch:{} 对象，可监听数据，数据发生变化， 处理函数

 

目的： watch虽可监听，但只是浅监听，只监听数据第一层或者第二层，

何为第二层？

 let obj = {name: 'xx', child: {age: 11}};

  child之后的值就为第二层或者深层

实现目标: 如果 要监听一个对象中的属性，属性最高也是第二层了，watch可能监听不到，

  所有要使用深度监听：

 

实现代码:

watch: {

    ' user.phone ' : {

        handler:function() {   //特别注意，不能用箭头函数，箭头函数，this指向全局

            处理函数

        },

        deep: true    //深度监听

    }

}
